✅ How to Use It
In your main App.jsx or Home.jsx page:

noticeSidebar api : ✅ Backend: /api/notices (Go + Mongo)
Add to handlers/notice.go:

🔹 PART 2: Admin Approval Panel (Mongo ➝ MySQL)
🛠️ Functionality:
Admin sees temp registered users (from MongoDB).

Can approve → moves data to MySQL.

Can reject → deletes from MongoDB.

✅ Backend Route: GET /api/admin/temp-users
✅ POST /api/admin/approve
✅ POST /api/admin/reject

🔹 Step 5: Email Notification on Approval (Go backend)
Add this using Go’s net/smtp:

go
Copy
Edit
import (
	"net/smtp"
	"fmt"
)

func SendApprovalEmail(to string, name string) error {
	auth := smtp.PlainAuth("", "your-email@gmail.com", "your-app-password", "smtp.gmail.com")
	msg := []byte(fmt.Sprintf("Subject: Registration Approved!\r\n\r\nHi %s,\n\nYour account has been approved. You can now log in.\n\nRegards,\nXYZ College", name))

	return smtp.SendMail("smtp.gmail.com:587", auth, "your-email@gmail.com", []string{to}, msg)
}
Call this inside ApproveUser after successful MySQL insert.

🧪 STEP 1: MySQL + MongoDB Test Data
✅ MySQL Test Data
sql
Copy
Edit
CREATE DATABASE IF NOT EXISTS college;
USE college;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  password VARCHAR(100),
  role VARCHAR(50),
  course VARCHAR(100)
);

-- Sample approved users
INSERT INTO users (name, email, password, role, course) VALUES
('Alice Sharma', 'alice@xyz.edu', 'alice123', 'Student', 'B.Tech'),
('Dr. Rakesh Verma', 'rakesh@xyz.edu', 'rakesh123', 'Faculty', 'CSE');
✅ MongoDB Test Data (via Mongo Shell or Compass)
js
Copy
Edit
use college

db.temp_users.insertMany([
  {
    name: "John Doe",
    email: "john@xyz.edu",
    password: "john123",
    role: "Student",
    course: "M.Tech"
  },
  {
    name: "Dr. Sinha",
    email: "sinha@xyz.edu",
    password: "sinha123",
    role: "Faculty",
    course: "Mechanical"
  }
]);

db.notices.insertMany([
  { title: "Semester Exams start from July 15th" },
  { title: "AICTE Scholarship Portal open till June 30" }
]);

db.testimonials.insertMany([
  { name: "Priya", text: "XYZ College changed my life!", year: 2023 },
  { name: "Raj", text: "Amazing faculty and placements!", year: 2022 }
]);


📦 STEP 2: Docker + Docker Compose Setup
✅ Dockerfile for Go Backend
Dockerfile
Copy
Edit
# backend/Dockerfile
FROM golang:1.21
WORKDIR /app
COPY . .
RUN go mod tidy
RUN go build -o main
EXPOSE 8080
CMD ["./main"]
✅ Dockerfile for React Frontend
Dockerfile
Copy
Edit
# frontend/Dockerfile
FROM node:20
WORKDIR /app
COPY . .
RUN npm install
RUN npm run build
RUN npm install -g serve
EXPOSE 3000
CMD ["serve", "-s", "dist"]
✅ docker-compose.yml
yaml
Copy
Edit
version: '3.9'
services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend

  backend:
    build: ./backend
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - mongo
    environment:
      - MYSQL_USER=root
      - MYSQL_PASSWORD=yourpass
      - MYSQL_HOST=mysql
      - MONGO_URI=mongodb://mongo:27017

  mysql:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: yourpass
      MYSQL_DATABASE: college
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mysql_data:
  mongo_data:
🛣️ STEP 3: Route Structure
✅ Backend API Routes
Endpoint	Method	Description
/api/register-temp	POST	Register student/faculty (MongoDB)
/api/login	POST	Login approved user (MySQL)
/api/admin/temp-users	GET	List pending users (Admin)
/api/admin/approve	POST	Approve user (moves Mongo ➝ MySQL)
/api/admin/reject	POST	Reject user
/api/notices	GET	Public notices from MongoDB
/api/dashboard	GET	Dashboard data (JWT protected)

✅ React Route Suggestions
Route	Component
/	Home (carousel, about...)
/login (modal)	Login/Register modal
/dashboard	User Dashboard
/admin	Admin Panel UI
/placements	PlacementAchievements.jsx
/virtual-tour	VirtualTour.jsx

🚀 STEP 4: Deployment Options
✅ Local Dev
bash
Copy
Edit
docker-compose up --build
Then open:

Frontend → http://localhost:3000

Backend → http://localhost:8080

✅ Cloud Deploy Options
Option	Pros	Setup Guide
Railway	Fastest all-in-one deploy	Upload Docker + .env
Render	Better for frontend + API	Use monorepo Docker deploy
VPS (Ubuntu)	Full control	Use Nginx reverse proxy

If you'd like a ready Railway or Render config, I can generate it too.

✅ 1. JWT Middleware in Go – Protect /dashboard Route
🔐 Step 1: Generate Token on Login
In handlers/auth.go, update the login function:

✅ 2. Responsive Design Tweaks (React CSS)
✨ Global Tip: Use rem, @media & Flex/Grid
Update all your section CSS files with responsive rules like:

@media (max-width: 768px) {
  .about-section {
    padding: 20px;
    font-size: 0.95rem;
  }

  .dashboard h2 {
    font-size: 1.3rem;
  }

  table {
    font-size: 0.8rem;
  }

  .video-container {
    height: 250px;
  }
}


🧪 Test in DevTools:
Use Chrome → DevTools → Toggle Device Mode → Test 320px – 1440px

✅ 3. Email SMTP from Gmail (or Custom Domain)
🔧 Step 1: Setup App Password
For Gmail:

Go to https://myaccount.google.com/apppasswords

Generate password for "Mail" → Use it below

✅ Go Email Sender (in utils/email.go)
📬 Call it from Admin Approve:
go
Copy
Edit
_ = utils.SendApprovalEmail(user.Email, user.Name)
📧 Custom Domain Email?
Use Zoho Mail, Mailgun, or SendGrid

SMTP settings will change based on the provider.

📬 Email Setup (SMTP)
Use Gmail app password or a service like SendGrid/Mailgun.

✅ PHASE 1: Auth Routes (Register + Login)
🔁 Flow:
Student/Faculty registers → stored temporarily in MongoDB

Admin approves → user is moved to MySQL

Approved users can log in → receive JWT

✅ Connecting React Frontend to Go Backend
We'll walk through:

🔗 Setting up API base URL

🔐 Login: POST to /api/login and store JWT

👤 Register: POST to /api/register-temp

🛡️ Dashboard: GET /api/dashboard with JWT

✅ Handling token in localStorage + axios

📁 1. Set up API Helpers
➕ Install Axios
In your React project folder:

bash
Copy
Edit
npm install axios
📄 Create src/api/api.js

🔐 2. Login (GET Token from Backend)
📄 components/LoginRegisterModal.jsx

👤 3. Register (POST to Temp Storage MongoDB)
Extend the same modal:

🛡️ 4. Fetch Protected Dashboard
📄 components/Dashboard.jsx

🔓 5. Logout & Protect Routes
In Navbar.jsx:

<button onClick={() => {
  localStorage.removeItem('token');
  window.location.href = '/';
}}>Logout</button>
To protect dashboard:

jsx
Copy
Edit
useEffect(() => {
  const token = localStorage.getItem('token');
  if (!token) window.location.href = '/login';
}, []);




